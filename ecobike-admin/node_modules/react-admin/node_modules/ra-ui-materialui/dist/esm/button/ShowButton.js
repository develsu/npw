var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { memo } from 'react';
import ImageEye from '@mui/icons-material/RemoveRedEye';
import { Link } from 'react-router-dom';
import { useResourceContext, useRecordContext, useCreatePath, useCanAccess, useGetResourceLabel, useGetRecordRepresentation, useResourceTranslation, } from 'ra-core';
import { styled, useThemeProps, } from '@mui/material/styles';
import { Button } from './Button';
/**
 * Opens the Show view of a given record
 *
 * @example // basic usage
 * import { ShowButton, useRecordContext } from 'react-admin';
 *
 * const CommentShowButton = () => {
 *     const record = useRecordContext();
 *     return (
 *         <ShowButton label="Show comment" record={record} />
 *     );
 * };
 */
var ShowButton = function (inProps) {
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var _a = props.icon, icon = _a === void 0 ? defaultIcon : _a, labelProp = props.label, recordProp = props.record, resourceProp = props.resource, _b = props.scrollToTop, scrollToTop = _b === void 0 ? true : _b, rest = __rest(props, ["icon", "label", "record", "resource", "scrollToTop"]);
    var resource = useResourceContext(props);
    if (!resource) {
        throw new Error('<ShowButton> components should be used inside a <Resource> component or provided the resource prop.');
    }
    var record = useRecordContext(props);
    var createPath = useCreatePath();
    var _c = useCanAccess({
        action: 'show',
        resource: resource,
        record: record,
    }), canAccess = _c.canAccess, isPending = _c.isPending;
    var getResourceLabel = useGetResourceLabel();
    var getRecordRepresentation = useGetRecordRepresentation();
    var recordRepresentationValue = getRecordRepresentation(record);
    var recordRepresentation = typeof recordRepresentationValue === 'string'
        ? recordRepresentationValue
        : recordRepresentationValue === null || recordRepresentationValue === void 0 ? void 0 : recordRepresentationValue.toString();
    var label = useResourceTranslation({
        resourceI18nKey: "resources.".concat(resource, ".action.show"),
        baseI18nKey: 'ra.action.show',
        options: {
            name: getResourceLabel(resource, 1),
            recordRepresentation: recordRepresentation,
        },
        userText: labelProp,
    });
    if (!record || !canAccess || isPending)
        return null;
    return (React.createElement(StyledButton, __assign({ component: Link, to: createPath({ type: 'show', resource: resource, id: record.id }), state: scrollStates[String(scrollToTop)], 
        // avoid double translation
        label: React.createElement(React.Fragment, null, label), "aria-label": typeof label === 'string' ? label : undefined, onClick: stopPropagation }, rest), icon));
};
// avoids using useMemo to get a constant value for the link state
var scrollStates = {
    true: { _scrollToTop: true },
    false: {},
};
var defaultIcon = React.createElement(ImageEye, null);
// useful to prevent click bubbling in a datagrid with rowClick
var stopPropagation = function (e) { return e.stopPropagation(); };
var PureShowButton = memo(ShowButton, function (prevProps, nextProps) {
    return prevProps.resource === nextProps.resource &&
        (prevProps.record && nextProps.record
            ? prevProps.record.id === nextProps.record.id
            : prevProps.record == nextProps.record) && // eslint-disable-line eqeqeq
        prevProps.label === nextProps.label &&
        prevProps.disabled === nextProps.disabled;
});
export default PureShowButton;
var PREFIX = 'RaShowButton';
var StyledButton = styled(Button, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})({});
//# sourceMappingURL=ShowButton.js.map