import * as React from 'react';
import { Children } from 'react';
import { createPortal } from 'react-dom';
import { useStore, DataTableColumnRankContext, useDataTableStoreContext, useTranslate, DataTableColumnFilterContext, } from 'ra-core';
import { Box, InputAdornment, MenuList } from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import { Button } from '../../button';
import { ResettableTextField } from '../../input/ResettableTextField';
/**
 * Render DataTable.Col elements in the ColumnsButton selector using a React Portal.
 *
 * @see ColumnsButton
 */
export var ColumnsSelector = function (_a) {
    var children = _a.children;
    var translate = useTranslate();
    var _b = useDataTableStoreContext(), storeKey = _b.storeKey, defaultHiddenColumns = _b.defaultHiddenColumns;
    var _c = useStore("".concat(storeKey, "_columnRanks")), columnRanks = _c[0], setColumnRanks = _c[1];
    var _d = useStore(storeKey, defaultHiddenColumns), _hiddenColumns = _d[0], setHiddenColumns = _d[1];
    var elementId = "".concat(storeKey, "-columnsSelector");
    var _e = React.useState(function () {
        return typeof document !== 'undefined'
            ? document.getElementById(elementId)
            : null;
    }), container = _e[0], setContainer = _e[1];
    // on first mount, we don't have the container yet, so we wait for it
    React.useEffect(function () {
        if (container &&
            typeof document !== 'undefined' &&
            document.body.contains(container))
            return;
        // look for the container in the DOM every 100ms
        var interval = setInterval(function () {
            var target = document.getElementById(elementId);
            if (target)
                setContainer(target);
        }, 100);
        // stop looking after 500ms
        var timeout = setTimeout(function () { return clearInterval(interval); }, 500);
        return function () {
            clearInterval(interval);
            clearTimeout(timeout);
        };
    }, [elementId, container]);
    var _f = React.useState(''), columnFilter = _f[0], setColumnFilter = _f[1];
    if (!container)
        return null;
    var childrenArray = Children.toArray(children);
    var paddedColumnRanks = padRanks(columnRanks !== null && columnRanks !== void 0 ? columnRanks : [], childrenArray.length);
    var shouldDisplaySearchInput = childrenArray.length > 5;
    return createPortal(React.createElement(MenuList, null,
        shouldDisplaySearchInput ? (React.createElement(Box, { component: "li", tabIndex: -1 },
            React.createElement(ResettableTextField, { hiddenLabel: true, label: "", value: columnFilter, onChange: function (e) {
                    if (typeof e === 'string') {
                        setColumnFilter(e);
                        return;
                    }
                    setColumnFilter(e.target.value);
                }, placeholder: translate('ra.action.search_columns', {
                    _: 'Search columns',
                }), InputProps: {
                    endAdornment: (React.createElement(InputAdornment, { position: "end" },
                        React.createElement(SearchIcon, { color: "disabled" }))),
                }, resettable: true, autoFocus: true, size: "small", sx: { mb: 1 } }))) : null,
        paddedColumnRanks.map(function (position, index) { return (React.createElement(DataTableColumnRankContext.Provider, { value: position, key: index },
            React.createElement(DataTableColumnFilterContext.Provider, { value: columnFilter, key: index }, childrenArray[position]))); }),
        React.createElement(Box, { component: "li", className: "columns-selector-actions", sx: { textAlign: 'center', mt: 1 } },
            React.createElement(Button, { onClick: function () {
                    setColumnRanks(undefined);
                    setHiddenColumns(defaultHiddenColumns);
                } }, "Reset"))), container);
};
var padRanks = function (ranks, length) {
    return ranks.concat(Array.from({ length: length - ranks.length }, function (_, i) { return ranks.length + i; }));
};
//# sourceMappingURL=ColumnsSelector.js.map