var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Typography } from '@mui/material';
import { useTranslate, ReferenceOneFieldBase, } from 'ra-core';
import { ReferenceFieldView } from './ReferenceField';
import { sanitizeFieldRestProps } from './sanitizeFieldRestProps';
import { useThemeProps } from '@mui/material/styles';
/**
 * Render the related record in a one-to-one relationship
 *
 * Expects a single field as child
 *
 * @example // display the bio of the current author
 * <ReferenceOneField reference="bios" target="author_id">
 *     <TextField source="body" />
 * </ReferenceOneField>
 */
export var ReferenceOneField = function (inProps) {
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var children = props.children, render = props.render, reference = props.reference, _a = props.source, source = _a === void 0 ? 'id' : _a, target = props.target, emptyText = props.emptyText, empty = props.empty, sort = props.sort, filter = props.filter, link = props.link, queryOptions = props.queryOptions, rest = __rest(props, ["children", "render", "reference", "source", "target", "emptyText", "empty", "sort", "filter", "link", "queryOptions"]);
    var translate = useTranslate();
    return (React.createElement(ReferenceOneFieldBase, __assign({}, props, { empty: emptyText ? (typeof emptyText === 'string' ? (React.createElement(Typography, { component: "span", variant: "body2" }, emptyText &&
            translate(emptyText, { _: emptyText }))) : (emptyText)) : typeof empty === 'string' ? (React.createElement(Typography, { component: "span", variant: "body2" }, empty && translate(empty, { _: empty }))) : (empty !== null && empty !== void 0 ? empty : null) }),
        React.createElement(ReferenceFieldView, __assign({ reference: reference, source: source, render: render }, sanitizeFieldRestProps(rest)), children)));
};
// disable sorting on this field by default as its default source prop ('id')
// will match the default sort ({ field: 'id', order: 'DESC'})
// leading to an incorrect sort indicator in a datagrid header
ReferenceOneField.sortable = false;
var PREFIX = 'RaReferenceOneField';
//# sourceMappingURL=ReferenceOneField.js.map