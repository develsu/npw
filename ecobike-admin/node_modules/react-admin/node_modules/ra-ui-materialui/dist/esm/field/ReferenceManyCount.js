var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { useRecordContext, useCreatePath, ReferenceManyCountBase, } from 'ra-core';
import clsx from 'clsx';
import { Typography, CircularProgress } from '@mui/material';
import { styled, useThemeProps, } from '@mui/material/styles';
import ErrorIcon from '@mui/icons-material/Error';
import get from 'lodash/get';
import { sanitizeFieldRestProps } from './sanitizeFieldRestProps';
import { Link } from '../Link';
/**
 * Fetch and render the number of records related to the current one
 *
 * Relies on dataProvider.getManyReference() returning a total property
 *
 * @example // Display the number of comments for the current post
 * <ReferenceManyCount reference="comments" target="post_id" />
 *
 * @example // Display the number of published comments for the current post
 * <ReferenceManyCount reference="comments" target="post_id" filter={{ is_published: true }} />
 *
 * @example // Display the number of comments for the current post, with a custom Typography variant
 * <ReferenceManyCount reference="comments" target="post_id" variant="h1" />
 */
export var ReferenceManyCount = function (inProps) {
    var _a;
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var className = props.className, reference = props.reference, target = props.target, filter = props.filter, sort = props.sort, link = props.link, resource = props.resource, _b = props.source, source = _b === void 0 ? 'id' : _b, rest = __rest(props, ["className", "reference", "target", "filter", "sort", "link", "resource", "source"]);
    var record = useRecordContext(props);
    var createPath = useCreatePath();
    var body = (React.createElement(ReferenceManyCountBase, __assign({}, props, { loading: React.createElement(CircularProgress, { size: 14 }), error: React.createElement(ErrorIcon, { color: "error", fontSize: "small", titleAccess: "error" }) })));
    return (React.createElement(StyledTypography, __assign({ className: clsx(className, ReferenceManyCountClasses.root), component: "span", variant: "body2" }, sanitizeFieldRestProps(rest)), link && record ? (React.createElement(Link, { className: ReferenceManyCountClasses.link, to: {
            pathname: createPath({
                resource: reference,
                type: 'list',
            }),
            search: "filter=".concat(JSON.stringify(__assign(__assign({}, (filter || {})), (_a = {}, _a[target] = get(record, source), _a)))),
        }, onClick: function (e) { return e.stopPropagation(); } }, body)) : (body)));
};
// This is a hack that replaces react support for defaultProps. We currently need this for the Datagrid.
ReferenceManyCount.textAlign = 'right';
var PREFIX = 'RaReferenceManyCount';
export var ReferenceManyCountClasses = {
    root: "".concat(PREFIX, "-root"),
    link: "".concat(PREFIX, "-link"),
};
var StyledTypography = styled(Typography, {
    name: PREFIX,
    overridesResolver: function (props, styles) {
        var _a;
        return (_a = {},
            _a['&'] = styles.root,
            _a["& .".concat(ReferenceManyCountClasses.link)] = styles.link,
            _a);
    },
})({});
//# sourceMappingURL=ReferenceManyCount.js.map