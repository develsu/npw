var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { memo } from 'react';
import { useListContext, ReferenceArrayFieldBase, } from 'ra-core';
import { styled, useThemeProps, } from '@mui/material/styles';
import { LinearProgress } from '../layout';
import { SingleFieldList } from '../list/SingleFieldList';
/**
 * A container component that fetches records from another resource specified
 * by an array of *ids* in current record.
 *
 * You must define the fields to be passed to the iterator component as children.
 *
 * @example Display all the products of the current order as datagrid
 * // order = {
 * //   id: 123,
 * //   product_ids: [456, 457, 458],
 * // }
 * <ReferenceArrayField label="Products" reference="products" source="product_ids">
 *     <Datagrid>
 *         <TextField source="id" />
 *         <TextField source="description" />
 *         <NumberField source="price" options={{ style: 'currency', currency: 'USD' }} />
 *         <EditButton />
 *     </Datagrid>
 * </ReferenceArrayField>
 *
 * @example Display all the categories of the current product as a list of chips
 * // product = {
 * //   id: 456,
 * //   category_ids: [11, 22, 33],
 * // }
 * <ReferenceArrayField label="Categories" reference="categories" source="category_ids">
 *     <SingleFieldList>
 *         <ChipField source="name" />
 *     </SingleFieldList>
 * </ReferenceArrayField>
 *
 * By default, restricts the displayed values to 1000. You can extend this limit
 * by setting the `perPage` prop.
 *
 * @example
 * <ReferenceArrayField perPage={10} reference="categories" source="category_ids">
 *    ...
 * </ReferenceArrayField>
 *
 * By default, the field displays the results in the order in which they are referenced
 * (i.e. in the order of the list of ids). You can change this order
 * by setting the `sort` prop (an object with `field` and `order` properties).
 *
 * @example
 * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference="categories" source="category_ids">
 *    ...
 * </ReferenceArrayField>
 *
 * Also, you can filter the results to display only a subset of values. Use the
 * `filter` prop for that.
 *
 * @example
 * <ReferenceArrayField filter={{ is_published: true }} reference="categories" source="category_ids">
 *    ...
 * </ReferenceArrayField>
 */
export var ReferenceArrayField = function (inProps) {
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var pagination = props.pagination, children = props.children, className = props.className, sx = props.sx, render = props.render, controllerProps = __rest(props, ["pagination", "children", "className", "sx", "render"]);
    return (React.createElement(ReferenceArrayFieldBase, __assign({}, controllerProps),
        React.createElement(PureReferenceArrayFieldView, { pagination: pagination, className: className, sx: sx, render: render }, children)));
};
export var ReferenceArrayFieldView = function (props) {
    var children = props.children, render = props.render, pagination = props.pagination, className = props.className, sx = props.sx;
    var listContext = useListContext();
    var isPending = listContext.isPending, total = listContext.total;
    return (React.createElement(Root, { className: className, sx: sx }, isPending ? (React.createElement(LinearProgress, { className: ReferenceArrayFieldClasses.progress })) : (React.createElement("span", null,
        (render ? render(listContext) : children) || (React.createElement(SingleFieldList, null)),
        pagination && total !== undefined ? pagination : null))));
};
var PREFIX = 'RaReferenceArrayField';
export var ReferenceArrayFieldClasses = {
    progress: "".concat(PREFIX, "-progress"),
};
var Root = styled('span', {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function (_a) {
    var _b;
    var theme = _a.theme;
    return (_b = {
            display: 'block'
        },
        _b["& .".concat(ReferenceArrayFieldClasses.progress)] = {
            marginTop: theme.spacing(2),
        },
        _b);
});
var PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);
//# sourceMappingURL=ReferenceArrayField.js.map