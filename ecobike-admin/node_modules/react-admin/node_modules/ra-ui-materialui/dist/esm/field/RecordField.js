var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { styled } from '@mui/material/styles';
import { Stack, Typography, useThemeProps, } from '@mui/material';
import { FieldTitle, useRecordContext, useResourceContext, useTranslate, } from 'ra-core';
import clsx from 'clsx';
import { TextField } from './TextField';
var PREFIX = 'RaRecordField';
export var RecordField = function (inProps) {
    var _a;
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var children = props.children, className = props.className, empty = props.empty, field = props.field, label = props.label, render = props.render, source = props.source, sx = props.sx, TypographyProps = props.TypographyProps, variant = props.variant, rest = __rest(props, ["children", "className", "empty", "field", "label", "render", "source", "sx", "TypographyProps", "variant"]);
    var resource = useResourceContext();
    var record = useRecordContext(props);
    var translate = useTranslate();
    if (!source && !label)
        return null;
    return (React.createElement(Root, __assign({ sx: sx, className: clsx(className, (_a = {},
            _a[RecordFieldClasses.inline] = variant === 'inline',
            _a)) }, rest),
        label !== '' && label !== false ? (React.createElement(Typography, __assign({ className: RecordFieldClasses.label }, TypographyProps),
            React.createElement(FieldTitle, { label: label, source: source, resource: resource, isRequired: false }))) : null,
        children ? (React.createElement("span", { className: RecordFieldClasses.value }, children)) : render ? (record && (React.createElement(Typography, { component: "span", variant: "body2", className: RecordFieldClasses.value }, render(record) ||
            (typeof empty === 'string'
                ? translate(empty, { _: empty })
                : empty)))) : field ? (React.createElement(field, {
            source: source,
            emptyText: empty,
            className: RecordFieldClasses.value,
        })) : source ? (React.createElement(TextField, { source: source, emptyText: empty, resource: resource, className: RecordFieldClasses.value })) : null));
};
export var RecordFieldClasses = {
    label: "".concat(PREFIX, "-label"),
    value: "".concat(PREFIX, "-value"),
    inline: "".concat(PREFIX, "-inline"),
};
var Root = styled(Stack, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function (_a) {
    var _b;
    var theme = _a.theme;
    return (_b = {},
        _b["&.".concat(RecordFieldClasses.inline)] = {
            flexDirection: 'row',
        },
        _b["& .".concat(RecordFieldClasses.label)] = {
            fontSize: '0.75rem',
            marginBottom: '0.2em',
            color: (theme.vars || theme).palette.text.secondary,
        },
        _b["&.".concat(RecordFieldClasses.inline, " .").concat(RecordFieldClasses.label)] = {
            fontSize: '0.875rem',
            display: 'block',
            minWidth: 150,
        },
        _b["& .".concat(RecordFieldClasses.value)] = {
            flex: 1,
        },
        _b);
});
//# sourceMappingURL=RecordField.js.map