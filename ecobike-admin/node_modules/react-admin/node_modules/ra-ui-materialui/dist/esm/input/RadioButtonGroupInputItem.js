var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import FormControlLabel from '@mui/material/FormControlLabel';
import Radio from '@mui/material/Radio';
import { useChoices } from 'ra-core';
import { styled, useThemeProps, } from '@mui/material/styles';
import { sanitizeInputRestProps } from './sanitizeInputRestProps';
export var RadioButtonGroupInputItem = function (props) {
    var _a = useThemeProps({
        props: props,
        name: PREFIX,
    }), choice = _a.choice, optionText = _a.optionText, optionValue = _a.optionValue, source = _a.source, translateChoice = _a.translateChoice, _b = _a.disableValue, disableValue = _b === void 0 ? 'disabled' : _b, rest = __rest(_a, ["choice", "optionText", "optionValue", "source", "translateChoice", "disableValue"]);
    var _c = useChoices({
        optionText: optionText,
        optionValue: optionValue,
        translateChoice: translateChoice,
        disableValue: disableValue,
    }), getChoiceText = _c.getChoiceText, getChoiceValue = _c.getChoiceValue, getDisableValue = _c.getDisableValue;
    var label = getChoiceText(choice);
    var value = getChoiceValue(choice);
    var disabled = getDisableValue(choice);
    var nodeId = "".concat(source, "_").concat(value);
    return (React.createElement(StyledFormControlLabel, __assign({ label: label, htmlFor: nodeId, value: value, disabled: disabled, control: React.createElement(Radio, { id: nodeId, color: "primary" }) }, sanitizeInputRestProps(rest))));
};
export default RadioButtonGroupInputItem;
var PREFIX = 'RaRadioButtonGroupInputItem';
var StyledFormControlLabel = styled(FormControlLabel, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})({});
//# sourceMappingURL=RadioButtonGroupInputItem.js.map