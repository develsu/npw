var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { useCallback } from 'react';
import clsx from 'clsx';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormHelperText from '@mui/material/FormHelperText';
import FormGroup from '@mui/material/FormGroup';
import Switch from '@mui/material/Switch';
import { FieldTitle, useInput } from 'ra-core';
import { styled, useThemeProps, } from '@mui/material/styles';
import { sanitizeInputRestProps } from './sanitizeInputRestProps';
import { InputHelperText } from './InputHelperText';
export var BooleanInput = function (props) {
    var _a = useThemeProps({
        props: props,
        name: PREFIX,
    }), className = _a.className, _b = _a.row, row = _b === void 0 ? false : _b, _c = _a.defaultValue, defaultValue = _c === void 0 ? false : _c, format = _a.format, label = _a.label, fullWidth = _a.fullWidth, helperText = _a.helperText, onBlur = _a.onBlur, onChange = _a.onChange, onFocus = _a.onFocus, readOnly = _a.readOnly, disabled = _a.disabled, parse = _a.parse, resource = _a.resource, source = _a.source, validate = _a.validate, _d = _a.options, options = _d === void 0 ? defaultOptions : _d, sx = _a.sx, rest = __rest(_a, ["className", "row", "defaultValue", "format", "label", "fullWidth", "helperText", "onBlur", "onChange", "onFocus", "readOnly", "disabled", "parse", "resource", "source", "validate", "options", "sx"]);
    var _e = useInput(__assign({ defaultValue: defaultValue, format: format, parse: parse, resource: resource, source: source, onBlur: onBlur, onChange: onChange, type: 'checkbox', validate: validate, disabled: disabled, readOnly: readOnly }, rest)), id = _e.id, field = _e.field, isRequired = _e.isRequired, _f = _e.fieldState, error = _f.error, invalid = _f.invalid;
    var handleChange = useCallback(function (event) {
        field.onChange(event);
        // Ensure field is considered as touched
        field.onBlur();
    }, [field]);
    var renderHelperText = helperText !== false || invalid;
    return (React.createElement(StyledFormGroup, { className: clsx('ra-input', "ra-input-".concat(source), className), row: row, sx: sx },
        React.createElement(FormControlLabel, { inputRef: field.ref, control: React.createElement(Switch, __assign({ id: id, name: field.name, onChange: handleChange, onFocus: onFocus, checked: Boolean(field.value) }, sanitizeInputRestProps(rest), options, { disabled: disabled || readOnly, readOnly: readOnly })), label: React.createElement(FieldTitle, { label: label, source: source, resource: resource, isRequired: isRequired }) }),
        renderHelperText ? (React.createElement(FormHelperText, { error: invalid },
            React.createElement(InputHelperText, { error: error === null || error === void 0 ? void 0 : error.message, helperText: helperText }))) : null));
};
var defaultOptions = {};
var PREFIX = 'RaBooleanInput';
var StyledFormGroup = styled(FormGroup, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})({});
//# sourceMappingURL=BooleanInput.js.map