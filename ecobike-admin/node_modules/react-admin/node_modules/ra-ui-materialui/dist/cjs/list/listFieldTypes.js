"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listFieldTypes = void 0;
var React = __importStar(require("react"));
var datatable_1 = require("./datatable");
var SingleFieldList_1 = require("./SingleFieldList");
var field_1 = require("../field");
exports.listFieldTypes = {
    table: {
        component: function (props) {
            return React.createElement(datatable_1.DataTable, __assign({}, props));
        },
        representation: function (_props, children) { return "        <DataTable>\n".concat(children.map(function (child) { return "            ".concat(child.getRepresentation()); }).join('\n'), "\n        </DataTable>"); },
    },
    array: {
        component: function (_a) {
            var children = _a.children, props = __rest(_a, ["children"]);
            var childrenArray = React.Children.toArray(children);
            return (React.createElement(datatable_1.DataTable.Col, __assign({}, props),
                React.createElement(field_1.ArrayField, __assign({}, props),
                    React.createElement(SingleFieldList_1.SingleFieldList, null,
                        React.createElement(field_1.ChipField, { source: childrenArray.length > 0 &&
                                React.isValidElement(childrenArray[0]) &&
                                childrenArray[0].props.source })))));
        },
        representation: function (props, children) {
            return "<DataTable.Col source=\"".concat(props.source, "\">\n                <ArrayField source=\"").concat(props.source, "\">\n                    <SingleFieldList>\n                        <ChipField source=\"").concat(children.length > 0 && children[0].getProps().source, "\" />\n                    </SingleFieldList>\n                </ArrayField>\n            </DataTable.Col>");
        },
    },
    boolean: {
        component: function (props) { return (React.createElement(datatable_1.DataTable.Col, __assign({}, props),
            React.createElement(field_1.BooleanField, __assign({}, props)))); },
        representation: function (props) {
            return "<DataTable.Col source=\"".concat(props.source, "\">\n                <BooleanField source=\"").concat(props.source, "\" />\n            </DataTable.Col>");
        },
    },
    date: {
        component: function (props) { return (React.createElement(datatable_1.DataTable.Col, __assign({}, props),
            React.createElement(field_1.DateField, __assign({}, props)))); },
        representation: function (props) {
            return "<DataTable.Col source=\"".concat(props.source, "\">\n                <DateField source=\"").concat(props.source, "\" />\n            </DataTable.Col>");
        },
    },
    email: {
        component: function (props) { return (React.createElement(datatable_1.DataTable.Col, __assign({}, props),
            React.createElement(field_1.EmailField, __assign({}, props)))); },
        representation: function (props) {
            return "<DataTable.Col source=\"".concat(props.source, "\">\n                <EmailField source=\"").concat(props.source, "\" />\n            </DataTable.Col>");
        },
    },
    id: {
        component: function (props) { return React.createElement(datatable_1.DataTable.Col, __assign({}, props)); },
        representation: function (props) { return "<DataTable.Col source=\"".concat(props.source, "\" />"); },
    },
    number: {
        component: datatable_1.DataTable.NumberCol,
        representation: function (props) {
            return "<DataTable.NumberCol source=\"".concat(props.source, "\" />");
        },
    },
    reference: {
        component: function (props) { return (React.createElement(datatable_1.DataTable.Col, __assign({}, props),
            React.createElement(field_1.ReferenceField, __assign({}, props)))); },
        representation: function (props) {
            return "<DataTable.Col source=\"".concat(props.source, "\">\n                <ReferenceField source=\"").concat(props.source, "\" reference=\"").concat(props.reference, "\" />\n            </DataTable.Col>");
        },
    },
    referenceChild: {
        component: function () { return React.createElement(field_1.TextField, { source: "id" }); },
        representation: function () { return "<TextField source=\"id\" />"; },
    },
    referenceArray: {
        component: function (props) { return (React.createElement(datatable_1.DataTable.Col, __assign({}, props),
            React.createElement(field_1.ReferenceArrayField, __assign({}, props)))); },
        representation: function (props) {
            return "<DataTable.Col source=\"".concat(props.source, "\">\n                <ReferenceArrayField source=\"").concat(props.source, "\" reference=\"").concat(props.reference, "\" />\n            </DataTable.Col>");
        },
    },
    referenceArrayChild: {
        component: function () { return (React.createElement(SingleFieldList_1.SingleFieldList, null,
            React.createElement(field_1.ChipField, { source: "id" }))); },
        representation: function () {
            return "<SingleFieldList>\n                <ChipField source=\"id\" />\n            </SingleFieldList>";
        },
    },
    richText: undefined, // never display a rich text field in a datagrid
    string: {
        component: datatable_1.DataTable.Col,
        representation: function (props) { return "<DataTable.Col source=\"".concat(props.source, "\" />"); },
    },
    url: {
        component: function (props) { return (React.createElement(datatable_1.DataTable.Col, __assign({}, props),
            React.createElement(field_1.UrlField, __assign({}, props)))); },
        representation: function (props) {
            return "<DataTable.Col source=\"".concat(props.source, "\">\n                <UrlField source=\"").concat(props.source, "\" />\n            </DataTable.Col>");
        },
    },
};
//# sourceMappingURL=listFieldTypes.js.map