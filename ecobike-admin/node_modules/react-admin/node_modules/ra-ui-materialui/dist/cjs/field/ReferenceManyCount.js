"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferenceManyCountClasses = exports.ReferenceManyCount = void 0;
var react_1 = __importDefault(require("react"));
var ra_core_1 = require("ra-core");
var clsx_1 = __importDefault(require("clsx"));
var material_1 = require("@mui/material");
var styles_1 = require("@mui/material/styles");
var Error_1 = __importDefault(require("@mui/icons-material/Error"));
var get_1 = __importDefault(require("lodash/get"));
var sanitizeFieldRestProps_1 = require("./sanitizeFieldRestProps");
var Link_1 = require("../Link");
/**
 * Fetch and render the number of records related to the current one
 *
 * Relies on dataProvider.getManyReference() returning a total property
 *
 * @example // Display the number of comments for the current post
 * <ReferenceManyCount reference="comments" target="post_id" />
 *
 * @example // Display the number of published comments for the current post
 * <ReferenceManyCount reference="comments" target="post_id" filter={{ is_published: true }} />
 *
 * @example // Display the number of comments for the current post, with a custom Typography variant
 * <ReferenceManyCount reference="comments" target="post_id" variant="h1" />
 */
var ReferenceManyCount = function (inProps) {
    var _a;
    var props = (0, styles_1.useThemeProps)({
        props: inProps,
        name: PREFIX,
    });
    var className = props.className, reference = props.reference, target = props.target, filter = props.filter, sort = props.sort, link = props.link, resource = props.resource, _b = props.source, source = _b === void 0 ? 'id' : _b, rest = __rest(props, ["className", "reference", "target", "filter", "sort", "link", "resource", "source"]);
    var record = (0, ra_core_1.useRecordContext)(props);
    var createPath = (0, ra_core_1.useCreatePath)();
    var body = (react_1.default.createElement(ra_core_1.ReferenceManyCountBase, __assign({}, props, { loading: react_1.default.createElement(material_1.CircularProgress, { size: 14 }), error: react_1.default.createElement(Error_1.default, { color: "error", fontSize: "small", titleAccess: "error" }) })));
    return (react_1.default.createElement(StyledTypography, __assign({ className: (0, clsx_1.default)(className, exports.ReferenceManyCountClasses.root), component: "span", variant: "body2" }, (0, sanitizeFieldRestProps_1.sanitizeFieldRestProps)(rest)), link && record ? (react_1.default.createElement(Link_1.Link, { className: exports.ReferenceManyCountClasses.link, to: {
            pathname: createPath({
                resource: reference,
                type: 'list',
            }),
            search: "filter=".concat(JSON.stringify(__assign(__assign({}, (filter || {})), (_a = {}, _a[target] = (0, get_1.default)(record, source), _a)))),
        }, onClick: function (e) { return e.stopPropagation(); } }, body)) : (body)));
};
exports.ReferenceManyCount = ReferenceManyCount;
// This is a hack that replaces react support for defaultProps. We currently need this for the Datagrid.
exports.ReferenceManyCount.textAlign = 'right';
var PREFIX = 'RaReferenceManyCount';
exports.ReferenceManyCountClasses = {
    root: "".concat(PREFIX, "-root"),
    link: "".concat(PREFIX, "-link"),
};
var StyledTypography = (0, styles_1.styled)(material_1.Typography, {
    name: PREFIX,
    overridesResolver: function (props, styles) {
        var _a;
        return (_a = {},
            _a['&'] = styles.root,
            _a["& .".concat(exports.ReferenceManyCountClasses.link)] = styles.link,
            _a);
    },
})({});
//# sourceMappingURL=ReferenceManyCount.js.map