"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Show = void 0;
var React = __importStar(require("react"));
var ra_core_1 = require("ra-core");
var styles_1 = require("@mui/material/styles");
var ShowView_1 = require("./ShowView");
var layout_1 = require("../layout");
/**
 * Page component for the Show view
 *
 * The `<Show>` component handles the headless logic of the Show page:
 * - it calls useShowController to fetch the record from the data provider,
 * - it creates a ShowContext and a RecordContext,
 * - it computes the default page title
 * - it renders the page layout with the correct title and actions
 *
 * `<Show>` is not responsible for rendering the actual page -
 * that's the job of its child component (usually `<SimpleShowLayout>`).
 *
 * @example
 *
 * // in src/posts.js
 * import * as React from "react";
 * import { Show, SimpleShowLayout, TextField } from 'react-admin';
 *
 * export const PostShow = () => (
 *     <Show>
 *         <SimpleShowLayout>
 *             <TextField source="title" />
 *         </SimpleShowLayout>
 *     </Show>
 * );
 *
 * // in src/App.js
 * import * as React from "react";
 * import { Admin, Resource } from 'react-admin';
 *
 * import { PostShow } from './posts';
 *
 * const App = () => (
 *     <Admin dataProvider={...}>
 *         <Resource name="posts" show={PostShow} />
 *     </Admin>
 * );
 * export default App;
 *
 * @typedef {(showContext: Object) => ReactNode} RenderProp
 * @param {ShowProps} inProps
 * @param {RenderProp} inProps.render A function rendering the page content, receive the show context as its argument.
 * @param {ReactElement|false} inProps.actions An element to display above the page content, or false to disable actions.
 * @param {string} inProps.className A className to apply to the page content.
 * @param {ElementType} inProps.component The component to use as root component (div by default).
 * @param {boolean} inProps.emptyWhileLoading Do not display the page content while loading the initial data.
 * @param {string} inProps.id The id of the resource to display (grabbed from the route params if not defined).
 * @param {Object} inProps.queryClient Options to pass to the react-query useQuery hook.
 * @param {string} inProps.resource The resource to fetch from the data provider (grabbed from the ResourceContext if not defined).
 * @param {Object} inProps.sx Custom style object.
 * @param {ElementType|string} inProps.title The title of the page. Defaults to `#{resource} #${id}`.
 *
 * @see ShowView for the actual rendering
 */
var Show = function (inProps) {
    var props = (0, styles_1.useThemeProps)({
        props: inProps,
        name: PREFIX,
    });
    var id = props.id, resource = props.resource, queryOptions = props.queryOptions, disableAuthentication = props.disableAuthentication, _a = props.loading, loading = _a === void 0 ? defaultLoading : _a, rest = __rest(props, ["id", "resource", "queryOptions", "disableAuthentication", "loading"]);
    if (!props.render && !props.children) {
        throw new Error('<Show> requires either a `render` prop or `children` prop');
    }
    return (React.createElement(ra_core_1.ShowBase, { id: id, disableAuthentication: disableAuthentication, queryOptions: queryOptions, resource: resource, loading: loading },
        React.createElement(ShowView_1.ShowView, __assign({}, rest))));
};
exports.Show = Show;
var defaultLoading = React.createElement(layout_1.Loading, null);
var PREFIX = 'RaShow'; // Types declared in ShowView.
//# sourceMappingURL=Show.js.map